#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <mpi.h>
#include <string.h>
#include <math.h>

#define A(x,y) ARRAY_A[(x)*(TILESIZE)+(y)]
#define B(x,y) ARRAY_B[(x)*(TILESIZE)+(y)]
#define C(x,y) ARRAY_C[(x)*(TILESIZE)+(y)]
#define TA(x,y) TEMP_A[(x)*(TILESIZE)+(y)]
#define TB(x,y) TEMP_B[(x)*(TILESIZE)+(y)]


int main(int argc, char *argv[])
{
	int N;
	MPI_Init(&argc, &argv);

	if (argc < 2) {
		printf("Missing <Dimension of Matrix N> argument\n");
	} else {
		N = strtol(argv[1], NULL, 10);
	}

	// For testing purpose
	int buffer[1]; 
	// Determine rank and number of processes
	int num_procs;
	int rank;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &num_procs);

	int p = (int)sqrt(num_procs);
	int TILESIZE =  (int)(N/p);
	int row_num = (int)(rank/p);
	int col_num = rank%p;

	double *ARRAY_A = (double *)malloc(TILESIZE*TILESIZE*sizeof(double));
	double *ARRAY_B = (double *)malloc(TILESIZE*TILESIZE*sizeof(double));
	double *ARRAY_C = (double *)malloc(TILESIZE*TILESIZE*sizeof(double));

	double *TEMP_A = (double *)malloc(TILESIZE*TILESIZE*sizeof(double));
	double *TEMP_B = (double *)malloc(TILESIZE*TILESIZE*sizeof(double));



	for(int i=0; i<TILESIZE; i++) {
		for(int j=0; j<TILESIZE; j++) {
			A(i, j) = i+row_num*TILESIZE;
			B(i, j) = i+row_num*TILESIZE+j+col_num*TILESIZE;
		}
	}

	MPI_Comm new_comm_row;
	MPI_Comm new_comm_col;

	MPI_Comm_split(MPI_COMM_WORLD, row_num, col_num, &new_comm_row);
	MPI_Comm_split(MPI_COMM_WORLD, col_num+p, row_num, &new_comm_col);

	if(rank == 3) buffer[0] = 51;
	MPI_Bcast(buffer, 1, MPI_INT, 1, new_comm_row);
	
	printf("rank [%d], buffer = %d\n", rank, buffer[0]);

	for(int k = 0; k<=p-1; k++) {
		// copy to temp 
		for(int i=0; i<TILESIZE; i++) {
			for(int j=0; j<TILESIZE; j++) {
				TA(i, j) = A(i, j);
				TB(i, j) = B(i, j);
				// printf("rank [%d]\t temp A=%lf; B=%lf\n", rank, TA(i, j), TB(i, j));
			}
			
		}

		if(k == col_num) {
			printf("@k=%d\t rank [%d] broadcast A[%d, %d]:%lf on row channel [%d]\n", k, rank, row_num, k, TEMP_A[0], row_num);
			MPI_Bcast(TEMP_A, TILESIZE*TILESIZE, MPI_DOUBLE, col_num, new_comm_row);
		}
		if(k == row_num) {
			printf("@k=%d\t rank [%d] broadcast B[%d, %d]:%lf on col channel [%d]\n", k, rank, k, col_num, TEMP_B[0], col_num);
			MPI_Bcast(TEMP_B, TILESIZE*TILESIZE, MPI_DOUBLE, row_num, new_comm_col);
		}
		MPI_Barrier(MPI_COMM_WORLD);

/* 		printf("@k=%d rank [%d] A\n", k, rank);
		for(int i=0; i<TILESIZE; i++) {
			for(int j=0; j<TILESIZE; j++) {
				printf("%lf\t", TA(i, j));
			}
			printf("\n");
		}
		printf("\n");
		printf("@k=%d rank [%d] B\n", k, rank);
		for(int i=0; i<TILESIZE; i++) {
			for(int j=0; j<TILESIZE; j++) {
				printf("%lf\t", TB(i, j));
			}
			printf("\n");
		}
		printf("\n"); */


		// calculate C
/* 		for(int i=0; i<TILESIZE; i++) {
			for(int j=0; j<TILESIZE; j++) {
				printf("rank [%d]\t TA = %lf; TB = %lf\n", rank, TA(i, j), TB(i, j));
			}
		} */
	 	// printf("rank [%d]\t TA = %lf; TB = %lf\n", rank, TA(0, 0), TB(0, 0));

	
/* 		printf("\nrank [%d] tempA:\n", rank);
		for(int i=0; i<TILESIZE; i++) {
			for(int j=0; j<TILESIZE; j++) {
				printf("%lf\t", TA(i, j));
			}
		}
		printf("\nrank [%d] tempB:\n", rank);
		for(int i=0; i<TILESIZE; i++) {
			for(int j=0; j<TILESIZE; j++) {
				printf("%lf\t", TB(i, j));
			}
		} */
		//MPI_Barrier(MPI_COMM_WORLD);
	}


	double sum = 0;
	for(int i=0; i<TILESIZE; i++) {
		for(int j=0; j<TILESIZE; j++) {
			sum += C(i, j);
		}
	}
	// printf("rank [%d] sum = %lf\n", rank, sum);

/* 	printf("rank [%d]\n", rank);
	for(int i=0; i<TILESIZE; i++) {
		for(int j=0; j<TILESIZE; j++) {
			printf("%lf\t",C(i, j));
		}
		printf("\n");
	} */
	
	MPI_Comm_free(&new_comm_row);
	MPI_Comm_free(&new_comm_col);

	MPI_Finalize();
	return 0;
}